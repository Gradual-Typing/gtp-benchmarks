;; This file was generated by the `with-cache` library on 2018-11-11
(((acquire dungeon forth fsm fsmoo gregor jpeg kcfa lnm mbta morsecode quadT quadU sieve snake suffixtree synth take5 tetris zombie zordoz)) (3) 0 () 0 () () (c (c acquire c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board-adapted.rkt") (c require/typed/check c (u . "board.rkt") q (#:struct tile ((column : Column) (row : Row))) (tile<=? (-> Tile Tile Boolean)) (tile->string (-> Tile String)) (ALL-TILES (Listof Tile)) (STARTER-TILES# Natural) (FOUNDING (quote FOUNDING)) (GROWING (quote GROWING)) (MERGING (quote MERGING)) (SINGLETON (quote SINGLETON)) (IMPOSSIBLE (quote IMPOSSIBLE)) (deduplicate/hotel (-> (Listof Hotel) (Listof Hotel))) (make-board (-> Board)) (board-tiles (-> Board (Listof Tile))) (what-kind-of-spot (-> Board Tile SpotType)) (growing-which (-> Board Tile (Option Hotel))) (merging-which (-> Board Tile (Values (Pairof Hotel (Listof Hotel)) (Listof Hotel)))) (size-of-hotel (-> Board Hotel Natural)) (free-spot? (-> Board Tile Boolean)) (merge-hotels (-> Board Tile Hotel Board)) (found-hotel (-> Board Tile Hotel Board)) (grow-hotel (-> Board Tile Board)) (place-tile (-> Board Tile Board)) (set-board (-> Board Tile Kind (Option Hotel) Board)) (affordable? (-> Board (Listof Hotel) Cash Boolean)) (*create-board-with-hotels (-> (Listof Tile) (Listof (Pairof Hotel (Listof Tile))) Board)) (distinct-and-properly-formed (-> (Listof Tile) (-> (Listof (Pairof Hotel (Listof Tile))) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board.rkt") (c require/typed/check c (u . "basics.rkt") q (hotel? (-> Any Boolean)) (SAFE# Natural) (price-per-share (-> Hotel Natural (Option Cash))) (shares-order? (-> Any Boolean)) (hotel->color (-> Hotel Color)) (hotel->label (-> Hotel String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/basics.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Hotel) Hotel)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)) (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state-adapted.rkt") (c require/typed/check c (u . "state.rkt") q (score? (-> Any Boolean)) (#:struct player ((name : String) (tiles : (Listof Tile)) (money : Cash) (shares : Shares) (external : (Option (Instance Player%))))) (#:struct state ((board : Board) (players : (Listof Player)) (tiles : (Listof Tile)) (hotels : (Listof Hotel)) (shares : Shares) (bad : (Listof Player)))) (*create-player (-> String Cash Shares (Listof Tile) Player)) (player0 (-> String Tile Tile Tile Tile Tile Tile (Instance Player%) Player)) (state0 (-> Player * State)) (state-sub-shares (-> State Shares State)) (*cs0 (-> String * State)) (*create-state (-> Board (Listof Player) State)) (state-place-tile (->* (State Tile) ((Option Hotel)) State)) (state-move-tile (-> State Tile State)) (state-next-turn (-> State State)) (state-remove-current-player (-> State State)) (state-eliminate (-> State (Listof Player) State)) (state-current-player (-> State Player)) (state-buy-shares (-> State (Listof Hotel) State)) (state-return-shares (->* (State Decisions) (Board) State)) (state-score (-> State (Listof (List String Cash)))) (state-final? (-> State Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (CASH0 Cash) (FINAL# Natural) (SAFE# Natural) (banker-shares0 Shares) (bonus (-> M*ority Hotel Natural Cash)) (cash? (-> Any Boolean)) (player-shares0 Shares) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares->string (-> Shares String)) (shares-available (-> Shares Hotel Share)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-combinable? (-> (Listof Shares) Boolean)) (shares-order? (-> Any Boolean)) (shares-minus (-> Shares Shares Shares)) (shares-plus (-> Shares Shares Shares)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "admin.rkt") q (administrator% Administrator%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tree.rkt") (c require/typed/check c (u . "basics.rkt") q (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-order? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/admin.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (hotel? (-> Any Boolean)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares? (-> Any Boolean)) (shares-order? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "player.rkt") q (random-players (-> Natural (Listof (Instance Player%)))) (ordered-players (-> Natural (Listof (Instance Player%)))) (inf-loop-player (-> Natural (Instance Player%))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "admin.rkt") q (administrator% Administrator%) (turn% Turn%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "basics.rkt") q (player-shares0 Shares) (*combine-shares (-> (Listof Shares) Shares)) (shares-minus (-> Shares Shares Shares)) (banker-shares0 Shares))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "strategy.rkt") q (ordered-s Strategy) (random-s Strategy))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (SHARES-PER-TURN# Integer) (hotel<=? (-> Hotel Hotel Boolean)) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares-available (-> Shares Hotel Share)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Tile) Tile))))) c (c dungeon c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "cell.rkt") q (void-cell% Cell%) (wall% Cell%) (door% Door%) (vertical-door% Door%) (horizontal-door% Door%) (horizontal-wall% Cell%) (four-corner-wall% Cell%) (pillar% Cell%) (vertical-wall% Cell%) (north-west-wall% Cell%) (north-east-wall% Cell%) (south-west-wall% Cell%) (south-east-wall% Cell%) (north-tee-wall% Cell%) (west-tee-wall% Cell%) (east-tee-wall% Cell%) (south-tee-wall% Cell%) (empty-cell% Cell%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/cell.rkt") (c require/typed/check c (u . "message-queue.rkt") q (enqueue-message! (-> String Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "grid.rkt") q (array-set! (-> Grid Pos (Instance Cell%) Void)) (build-array (-> Pos (-> Any (Instance Cell%)) Grid)) (left (->* (Pos) (Index) Pos)) (right (->* (Pos) (Index) Pos)) (up (->* (Pos) (Index) Pos)) (down (->* (Pos) (Index) Pos)) (grid-ref (-> Grid Pos (U #f (Instance Cell%)))) (grid-height (-> Grid Index)) (grid-width (-> Grid Index)) (show-grid (-> Grid String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/grid.rkt") (c require/typed/check c (u . "cell.rkt") q (char->cell% (-> Char Cell%)) (void-cell% Cell%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "utils.rkt") q (random (-> Integer Natural)) (random-between (-> Integer Integer Integer)) (random-from (All (A) (-> (Listof A) A))) (reset! (-> Void))))) c (c forth c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "eval.rkt") q (forth-eval* (-> (Listof String) (Values Any Any))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/eval.rkt") (c require/typed/check c (u . "command.rkt") q (CMD* (Listof (Instance Command%))) (command% Command%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/command.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-drop (-> Stack Stack)) (stack-dup (-> Stack Stack)) (stack-init (-> Stack)) (stack-over (-> Stack Stack)) (stack-pop (-> Stack (Values Integer Stack))) (stack-push (-> Stack Integer Stack)) (stack-swap (-> Stack Stack)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/eval.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-init (-> Stack))))) c (c fsm c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "population.rkt") q (build-random-population (-> Natural Population)) (population-payoffs (-> Population (Listof Payoff))) (death-birth (-> Population Natural (#:random (U False Real)) Population)) (match-up* (-> Population Natural Population)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population.rkt") (c require/typed/check c (u . "utilities.rkt") q (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "utilities.rkt") q (relative-average (-> (Listof Real) Real Real))))) c (c fsmoo c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/automata-adapted.rkt") (c require/typed/check c (u . "automata.rkt") q (make-random-automaton (-> Natural oAutomaton)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population-adapted.rkt") (c require/typed/check c (u . "population.rkt") q (build-random-population (-> Natural oPopulation)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population.rkt") (c require/typed/check c (u . "utilities.rkt") q (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "utilities.rkt") q (relative-average (-> (Listof Real) Real Real))))) c (c gregor c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/core-adapter.rkt") (c require/typed/check c (u . "core-structs.rkt") q (#:struct YMD ((y : Natural) (m : Month) (d : Natural))) (#:struct HMSN ((h : Integer) (m : Integer) (s : Integer) (n : Integer))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/gregor-adapter.rkt") (c require/typed/check c (u . "gregor-structs.rkt") q (#:struct Date ((ymd : YMD) (jdn : Integer))) (#:struct Time ((hmsn : HMSN) (ns : Natural))) (#:struct DateTime ((date : Date) (time : Time) (jd : Exact-Rational))) (#:struct Moment ((datetime/local : DateTime) (utc-offset : Integer) (zone : (U String #f)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "date.rkt") q (date=? (-> Date Date Boolean)) (date (->* (Natural) (Month Natural) Date)) (date->iso8601 (-> Date String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/date.rkt") (c require/typed/check c (u . "ymd.rkt") q (ymd->jdn (-> YMD Integer)) (jdn->ymd (-> Exact-Rational YMD)) (jdn->iso-wday (-> Integer (U 1 2 3 4 5 6 7))) (ymd->yday (-> YMD Natural)) (iso-weeks-in-year (-> Natural (U 52 53))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "time.rkt") q (time=? (-> Time Time Boolean)) (time->iso8601 (-> Time String)) (make-time (->* (Integer) (Integer Integer Integer) Time)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time.rkt") (c require/typed/check c (u . "hmsn.rkt") q (hmsn->day-ns (-> HMSN Natural)) (day-ns->hmsn (-> Natural HMSN)) (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime=? (-> DateTime DateTime Boolean)) (datetime<=? (-> DateTime DateTime Boolean)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->time (-> DateTime Time)) (datetime->date (-> DateTime Date)) (datetime->iso8601 (-> DateTime String)) (datetime->posix (-> DateTime Exact-Rational)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/DAY Natural) (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "date.rkt") q (date->iso8601 (-> Date String)) (date->jdn (-> Date Integer)) (jdn->date (-> Integer Date)) (date->ymd (-> Date YMD)) (date (->* (Natural) (Month Natural) Date)) (date=? (-> Date Date Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "time.rkt") q (time->iso8601 (-> Time String)) (time->ns (-> Time Natural)) (day-ns->time (-> Natural Time)) (make-time (->* (Integer) (Integer Integer Integer) Time)) (time=? (-> Time Time Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "moment.rkt") q (current-timezone (Parameterof (U tz #f))) (moment (->* (Natural) (Month Natural Natural Natural Natural Natural #:tz (U tz #f) #:resolve-offset (-> (U tzgap tzoverlap) DateTime (U String #f) (U #f Moment) Moment)) Moment)) (moment=? (-> Moment Moment Boolean)) (UTC String) (moment->iso8601/tzid (-> Moment String)) (posix->moment (-> Exact-Rational tz Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "offset-resolvers.rkt") q (resolve-offset/raise (-> (U tzgap tzoverlap) DateTime (U String #f) (U Moment #f) Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "clock.rkt") q (current-clock (Parameterof (-> Exact-Rational))) (today/utc (-> Date)) (today (->* () (#:tz (U tz #f)) Date)) (current-time/utc (-> Time)) (current-time (->* () (#:tz (U tz #f)) Time)) (now/utc (-> DateTime)) (now (->* () (#:tz (U tz #f)) DateTime)) (now/moment/utc (-> Moment)) (now/moment (-> Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/clock.rkt") (c require/typed/check c (u . "moment.rkt") q (current-timezone (Parameterof (U tz #f))) (posix->moment (-> Exact-Rational tz Moment)) (moment->datetime/local (-> Moment DateTime)) (UTC String) (moment (->* (Natural) (Month Natural Natural Natural Natural Natural #:tz (U tz #f) #:resolve-offset (-> (U tzgap tzoverlap) DateTime (U String #f) (U #f Moment) Moment)) Moment)) (moment=? (-> Moment Moment Boolean)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/clock.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->date (-> DateTime Date)) (datetime->time (-> DateTime Time)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "difference.rkt") q (datetime-months-between (-> DateTime DateTime Integer)) (datetime-days-between (-> DateTime DateTime Integer)) (datetime-nanoseconds-between (-> DateTime DateTime Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "ymd.rkt") q (days-in-month (-> Natural Month (U 28 29 30 31))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/DAY Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "date.rkt") q (date->ymd (-> Date YMD)) (date (->* (Natural) (Month Natural) Date)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime<? (-> DateTime DateTime Boolean)) (datetime->date (-> DateTime Date)) (date+time->datetime (-> Date Time DateTime)) (datetime->time (-> DateTime Time)) (datetime->jd (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime))))) c (c jpeg c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "jfif.rkt") q (#:struct jfif ((frame : frame) (misc-segments : (Listof misc)) (mcu-array : (Array MCU)))) (#:struct frame ((marker : Natural) (precision : Byte) (y : Natural) (x : Natural) (components : (Vectorof component)) (samp-x : Natural) (samp-y : Natural))) (#:struct component ((id : Byte) (index : Natural) (samp-x : Natural) (samp-y : Natural) (q-table : Natural))) (#:struct misc ((marker : Natural) (bytes : Bytes))) (#:struct params ((q-tables : QT*) (dc-tables : H*) (ac-tables : H*) (restart-interval : Natural) (misc-segments : (Listof misc)))) (read-jfif (->* ((U String Bytes Input-Port)) (#:with-body? Boolean #:with-misc-sections? Boolean) jfif)) (write-jfif (-> (U String Output-Port) jfif Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/jfif.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (make-bit-port (-> Port Bit-Port)) (read-signed-bits (-> Bit-Port Natural Integer)) (write-bits (-> Bit-Port Integer Natural Void)) (flush-bits (-> Bit-Port Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/jfif.rkt") (c require/typed/check c (u . "huffman.rkt") q (make-huffman-table (-> Bytes Bytes Huffman)) (read-huffman-coded-value (-> Bit-Port Huffman Byte)) (compute-huffman-table-for-freqs (-> Q-Table Huffman)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/huffman.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (read-bit (-> Bit-Port Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "exif.rkt") q (parse-exif (-> Bytes (Listof PTs)))))) c (c kcfa c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs-adapted.rkt") (c require/typed/check c (u . "structs.rkt") q (#:struct Stx ((label : Label))) (#:struct (exp Stx) ()) (#:struct (Ref exp) ((var : Var))) (#:struct (Lam exp) ((formals : (Listof Var)) (call : Exp))) (#:struct (Call Stx) ((fun : Exp) (args : (Listof Exp)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "ui.rkt") q (analyze (-> Exp MonoStore)) (format-mono-store (-> MonoStore String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time-adapted.rkt") (c require/typed/check c (u . "time.rkt") q (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/denotable-adapted.rkt") (c require/typed/check c (u . "denotable.rkt") q (#:struct State ((call : Exp) (benv : BEnv) (store : Store) (time : Time))) (d-bot Denotable) (d-join (-> Denotable Denotable Denotable)) (empty-store Store) (store-lookup (-> Store Addr Denotable)) (store-update (-> Store Addr Denotable Store)) (store-update* (-> Store (Listof Addr) (Listof Denotable) Store)) (store-join (-> Store Store Store)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ui.rkt") (c require/typed/check c (u . "ai.rkt") q (atom-eval (-> BEnv Store (-> Exp Denotable))) (next (-> State (Setof State))) (explore (-> (Setof State) (Listof State) (Setof State)))))) c (c lnm c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/modulegraph-adapted.rkt") (c require/typed/check c (u . "modulegraph.rkt") q (#:struct modulegraph ((project-name : String) (adjlist : (Listof (Listof String))))) (project-name (-> ModuleGraph String)) (from-tex (-> Path-String ModuleGraph)) (module-names (-> ModuleGraph (Listof String))) (path->project-name (-> Path String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/summary-adapted.rkt") (c require/typed/check c (u . "summary.rkt") q (#:struct summary ((source : Path-String) (dataset : (Vectorof (Listof Index))) (modulegraph : ModuleGraph))) (from-rktd (->* (String) (#:graph (U Path #f)) Summary)) (all-variations (-> Summary (Sequenceof String))) (get-num-variations (-> Summary Index)) (get-project-name (-> Summary String)) (predicate->variations (-> Summary (-> String Boolean) (Sequenceof String))) (untyped-mean (-> Summary Real)) (variation->mean-runtime (-> Summary String Real)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/summary.rkt") (c require/typed/check c (u . "bitstring.rkt") q (bitstring->natural (-> String Index)) (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "spreadsheet.rkt") q (rktd->spreadsheet (-> Path-String #:output Path-String #:format Symbol Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/spreadsheet.rkt") (c require/typed/check c (u . "bitstring.rkt") q (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "lnm-plot.rkt") q (lnm-plot (-> Summary #:L (Listof Index) #:N Index #:M Index #:max-overhead Index #:cutoff-proportion Float #:num-samples Positive-Integer #:plot-height Positive-Integer #:plot-width Positive-Integer (Listof Any))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lnm-plot.rkt") (c require/typed/check c (u . "bitstring.rkt") q (in-reach (-> String Index (Listof String))) (log2 (-> Index Index))))) c (c mbta c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "run-t.rkt") q (EOM String) (run-t (-> String String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/run-t.rkt") (c require/typed/check c (u . "t-view.rkt") q (manage% Manage))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/t-view.rkt") (c require/typed/check c (u . "t-graph.rkt") q (read-t-graph (-> (Instance MBTA)))))) c (c morsecode c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "morse-code-strings.rkt") q (string->morse (-> String String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/morse-code-strings.rkt") (c require/typed/check c (u . "morse-code-table.rkt") q (char-table (HashTable Char String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "levenshtein.rkt") q (string-levenshtein (String String -> Integer))))) c (c quadT c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "world.rkt") q (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:quality-default (Parameterof Index)) (world:draft-quality Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quad-main.rkt") q (typeset (-> Quad DocQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->doc (-> (Listof Quad) DocQuad)) (quads->page (-> (Listof Quad) PageQuad)) (quads->block (-> (Listof Quad) BlockQuad)) (quad-attrs (Quad -> QuadAttrs)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (quad-car (-> Quad QuadListItem)) (quad-name (-> Quad QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (quad-has-attr? (Quad QuadAttrKey -> Boolean)) (quads->column (-> (Listof Quad) ColumnQuad)) (page (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PageQuad)) (column (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem ColumnQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "wrap.rkt") q (insert-spacers-in-line (->* (LineQuad) ((Option Symbol)) LineQuad)) (wrap-adaptive (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-best (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-first (->* ((Listof Quad)) (Float) (Listof LineQuad))) (fill (->* (LineQuad) ((Option Float)) LineQuad)) (add-horiz-positions (-> GroupQuad GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Font-Size Font-Name) (Font-Weight Font-Style) Float)) (measure-text (-> String Font-Size Font-Name Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->line (-> (Listof Quad) LineQuad)) (quad-attrs (-> Quad QuadAttrs)) (quad-name (Quad -> QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (quad->string (-> Quad String)) (optical-kern (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Optical-KernQuad)) (word-break (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Word-BreakQuad)) (piece (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PieceQuad)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (spacer (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem SpacerQuad)) (quad-has-attr? (-> Quad QuadAttrKey Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof JoinableType)) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key QuadAttrKey) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof QuadAttrValue)) (world:measure-key QuadAttrKey) (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key QuadAttrKey) (world:total-lines-key QuadAttrKey) (world:horiz-alignment-last-line-key QuadAttrKey) (world:horiz-alignment-key QuadAttrKey) (world:horiz-alignment-default (Parameterof QuadAttrKey)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs HashableList -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs QuadAttrKey * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree ((Treeof Quad) -> (Listof Quad))) (merge-attrs (JoinableType * -> QuadAttrs)) (group-quad-attr-remove* (GroupQuad QuadAttrKey * -> GroupQuad)) (quad-attr-remove* (Quad QuadAttrKey * -> Quad)) (quad-attr-set (Quad QuadAttrKey QuadAttrValue -> Quad)) (group-quad-attr-set (GroupQuad QuadAttrKey QuadAttrValue -> GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "world.rkt") q (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key QuadAttrKey) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key QuadAttrKey) (world:quality-key-default (Parameterof Index)) (world:paper-width-default (Parameterof Float)) (world:column-count-key QuadAttrKey) (world:column-count-key-default (Parameterof Index)) (world:column-gutter-key QuadAttrKey) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key QuadAttrKey) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "utils.rkt") q (merge-attrs (JoinableType * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (join-quads ((Listof Quad) -> (Listof Quad))) (hyphenate-quad (QuadListItem -> QuadListItem)) (quad-map ((QuadListItem -> QuadListItem) Quad -> Quad)) (group-quad-attr-set* (GroupQuad HashableList -> GroupQuad)) (quad-attr-set* (Quad HashableList -> Quad)) (attr-change (-> QuadAttrs HashableList QuadAttrs)) (compute-line-height (-> Quad Quad)) (add-vert-positions (-> GroupQuad GroupQuad)) (split-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A)))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quick-sample.rkt") q (quick-sample (-> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quick-sample.rkt") (c require/typed/check c (u . "quads.rkt") q (page-break (-> Page-BreakQuad)) (column-break (-> Column-BreakQuad)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (block (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BlockQuad)) (block-break (->* ((U HashableList QuadAttrs)) () #:rest QuadListItem Block-BreakQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "render.rkt") q (pdf-renderer% (Class (render-to-file (Quad Path-String -> Void)) (render-element (Quad -> Any)) (render-page ((Listof Quad) -> Void)) (render-word (Quad -> Any)) (render (-> Quad Any)) (finalize (-> Any Any)) (setup (-> Quad Quad)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-color-key QuadAttrKey) (world:font-color-default (Parameterof String)) (world:font-background-key QuadAttrKey) (world:font-background-default (Parameterof String)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Index)) (world:draft-quality Index) (world:page-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "utils.rkt") q (flatten-quad (Quad -> (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "quads.rkt") q (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-car (-> Quad QuadListItem)) (whitespace/nbsp? (-> Any Boolean)) (quad-name (-> Quad QuadName))))) c (c quadU c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "world.rkt") q (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:quality-default (Parameterof Integer)) (world:draft-quality Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quad-main.rkt") q (typeset (-> Quad Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "quads.rkt") q (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-car (-> Quad (U String Quad))) (line (->* ((Listof Any)) #:rest USQ Quad)) (quads->column (-> (Listof Quad) Quad)) (quads->page (-> (Listof Quad) Quad)) (quads->block (-> (Listof Quad) Quad)) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-name (-> Quad Symbol)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-list (-> Quad (Listof USQ))) (quad-attrs (-> Quad (Listof Any))) (quads->doc (-> (Listof Quad) Quad)) (page (->* ((Listof Any)) #:rest USQ Quad)) (column (->* ((Listof Any)) #:rest USQ Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "wrap.rkt") q (insert-spacers-in-line (->* (Quad) ((Option Symbol)) Quad)) (wrap-best (->* ((Listof Quad)) (Float) (Listof Quad))) (fill (->* (Quad) ((Option Float)) Quad)) (add-horiz-positions (-> Quad Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Positive-Flonum String) (Font-Weight Font-Style) Float)) (measure-text (-> String Positive-Flonum String Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (optical-kern (->* ((Listof Any)) () #:rest USQ Quad)) (line (->* ((Listof Any)) () #:rest USQ Quad)) (optical-kern? (-> Any Boolean)) (piece (->* ((Listof Any)) () #:rest USQ Quad)) (word-break (->* ((Listof Any)) () #:rest USQ Quad)) (quad->string (-> Quad String)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-attrs (-> Quad (Listof Any))) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-list (Quad -> (Listof USQ))) (quad-name (Quad -> Symbol)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quads->line (-> (Listof Quad) Quad)) (spacer (->* ((Listof Any)) () #:rest USQ Quad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof (Listof (U (quote bb) (quote nb) String)))) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key Symbol) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof Float)) (world:measure-key Symbol) (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key Symbol) (world:total-lines-key Symbol) (world:horiz-alignment-last-line-key Symbol) (world:horiz-alignment-key Symbol) (world:horiz-alignment-default (Parameterof Symbol)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs (Listof Any) -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs Symbol * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree (QEXP -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (group-quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-set (Quad Symbol Any -> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "world.rkt") q (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key Symbol) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key Symbol) (world:quality-key-default (Parameterof Integer)) (world:paper-width-default (Parameterof Float)) (world:column-count-key Symbol) (world:column-count-key-default (Parameterof Integer)) (world:column-gutter-key Symbol) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key Symbol) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "utils.rkt") q (add-vert-positions (-> Quad Quad)) (attr-change (-> QuadAttrs (Listof Any) QuadAttrs)) (compute-line-height (-> Quad Quad)) (hyphenate-quad (USQ -> USQ)) (join-quads ((Listof Quad) -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (quad-attr-set* (Quad (Listof Any) -> Quad)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (split-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A)))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "../base/csp/csp.rkt") q (problem% (Class (init-field (solver Any)) (field (_solver Any)) (field (_variable-domains Any)) (field (_constraints Any)) (reset (-> Void)) (custom-print (Output-Port Integer -> Void)) (custom-display (Output-Port -> Void)) (custom-write (Output-Port -> Void)) (add-variable (-> Any (Listof Any) Void)) (add-variables (-> (Listof Any) Any Void)) (add-constraint (-> (-> Index Boolean) (Listof Any) Void)) (get-solution (-> HashTableTop)) (get-solutions (-> (Listof (HashTable String Integer)))) (get-solution-iter (-> HashTableTop)) (set-solver (-> Any Void)) (get-solver (-> Any)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quick-sample.rkt") q (quick-sample (-> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quick-sample.rkt") (c require/typed/check c (u . "quads.rkt") q (block (->* (QuadAttrs) #:rest USQ Quad)) (block-break (-> QuadAttrs Quad)) (box (->* (QuadAttrs) #:rest USQ Quad)) (column-break (-> Quad)) (page-break (-> Quad)) (word (-> QuadAttrs String Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "render.rkt") q (pdf-renderer% (Class (render-to-file (Quad Path-String -> Void)) (render-element (Quad -> Any)) (render-page ((Listof Quad) -> Void)) (render-word (Quad -> Any)) (render (-> Quad Any)) (finalize (-> Any Any)) (setup (-> Quad Quad)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-color-key Symbol) (world:font-color-default (Parameterof String)) (world:font-background-key Symbol) (world:font-background-default (Parameterof String)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Integer)) (world:draft-quality Index) (world:page-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "utils.rkt") q (flatten-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "quads.rkt") q (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (word (->* ((Listof Any)) Quad)) (quad-name (-> Quad Symbol)) (quad-car (-> Quad USQ)) (whitespace/nbsp? (-> Any Boolean))))) c (c sieve c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "streams.rkt") q (#:struct stream ((first : Natural) (rest : (-> stream)))) (make-stream (-> Natural (-> stream) stream)) (stream-unfold (-> stream (values Natural stream))) (stream-get (-> stream Natural Natural)) (stream-take (-> stream Natural (Listof Natural)))))) c (c snake c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/data-adaptor.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct posn ((x : Real) (y : Real))) (#:struct snake ((dir : Dir) (segs : (NEListof Posn)))) (#:struct world ((snake : Snake) (food : Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "const.rkt") q (WORLD (-> World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "motion.rkt") q (reset! (-> Void)) (world->world (-> World World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "motion-help.rkt") q (snake-slither (-> Snake Snake)) (snake-grow (-> Snake Snake)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion-help.rkt") (c require/typed/check c (u . "cut-tail.rkt") q (cut-tail (-> (NEListof Posn) (Listof Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "handlers.rkt") q (handle-key (-> World String World)) (game-over? (-> World Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/handlers.rkt") (c require/typed/check c (u . "collide.rkt") q (snake-wall-collide? (-> Snake Boolean)) (snake-self-collide? (-> Snake Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/handlers.rkt") (c require/typed/check c (u . "motion.rkt") q (world-change-dir (-> World Dir World))))) c (c suffixtree c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "lcs.rkt") q (longest-common-substring (-> String String String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "label.rkt") q (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-source-eq? (-> Label Label Boolean)) (label-length (-> Label Index)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (label-ref (-> Label Integer (U Symbol Char))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "structs.rkt") q (make-tree (-> Tree)) (tree-root (-> Tree Node)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "ukkonen.rkt") q (tree-add! (-> Tree Label Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "label.rkt") q (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (label-element-equal? (-> Any Any Boolean)) (label-source-eq? (-> Label Label Boolean)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "structs.rkt") q (new-suffix-tree (-> Tree)) (node-find-child (-> Node Any (U Node #f))) (node-root? (-> Node Boolean)) (node-position-at-end? (-> Node Index Boolean)) (node-add-leaf! (-> Node Label Node)) (node-up-splice-leaf! (-> Node Index Label (values Node Node))) (node-follow/k (-> Node Label (-> Node (Pairof Node Index)) (-> Node Index (Pairof Node Index)) (-> Node Label Index (Pairof Node Index)) (-> Node Index Label Index (Pairof Node Index)) (Pairof Node Index)))))) c (c synth c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct Array ((shape : Indexes) (size : Integer) (strict? : (Boxof Boolean)) (strict! : (-> Void)) (unsafe-proc : (-> Indexes Float)))) (#:struct (Settable-Array Array) ((set-proc : (Indexes Float -> Void)))) (#:struct (Mutable-Array Settable-Array) ((data : (Vectorof Float)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "sequencer.rkt") q (note (-> Symbol Natural Natural (Pairof Natural Natural))) (sequence (-> Natural (Listof (Pairof (U Natural #f) Natural)) Natural (-> Float (-> Indexes Float)) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (build-array (-> Indexes (-> Indexes Flonum) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "array-transform.rkt") q (array-append* ((Listof Array) -> Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-default-strict! (-> Array Void)) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (-> (Listof Indexes) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-vector-remove (-> Indexes Integer Indexes)) (vector-copy-all (-> Indexes Indexes)) (unsafe-vector-insert (-> Indexes Integer Integer Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "synth.rkt") q (fs Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-utils.rkt") q (next-indexes! (-> Indexes Integer Indexes Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-size (-> Array Integer)) (array-strictness (Parameterof (U #f #t))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "mixer.rkt") q (mix (-> Weighted-Signal * Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (array-default-strict! (-> Array Void)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (case-> ((Listof Indexes) -> Indexes) ((Listof Indexes) (U #f #t (quote permissive)) -> Indexes))) (array-broadcasting (Parameterof (U #f #t (quote permissive)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "drum.rkt") q (drum (-> Natural Pattern Natural Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-size (-> Array Integer)) (make-array (-> In-Indexes Flonum Array)) (build-array (-> In-Indexes (-> Indexes Float) Array)) (unsafe-vector->array (-> Indexes (Vectorof Float) Mutable-Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-utils.rkt") q (array-shape-size (-> Indexes Integer)) (check-array-shape (-> In-Indexes (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-transform.rkt") q (array-append* ((Listof Array) -> Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "synth.rkt") q (fs Natural) (seconds->samples (-> Float Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "mixer.rkt") q (mix (-> Weighted-Signal * Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "synth.rkt") q (emit (-> Array (Vectorof Integer))) (sawtooth-wave (-> Float (-> Indexes Float)))))) c (c take5 c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-adapted.rkt") (c require/typed/check c (u . "card.rkt") q (#:struct card ((face : Face) (bulls : Bulls))) (>-face (-> Card Card Boolean)) (--face (-> Card Card Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "player.rkt") q (create-player (-> Natural Player)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "dealer.rkt") q (create-dealer (-> (Listof Player) Dealer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (FIVE Natural) (STACKS Natural) (SIXTYSIX Natural) (HAND Natural) (MIN-BULL Bulls) (MAX-BULL Bulls) (configuration (-> (Listof (List Symbol Natural)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "card-pool.rkt") q (create-card-pool (-> (-> (Listof Card) (Listof Card)) (-> Bulls) CardPool)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-pool.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (HAND Natural) (MIN-BULL Natural) (MAX-BULL Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "deck.rkt") q (create-deck (-> CardPool Deck)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (STACKS Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "stack.rkt") q (bulls (-> Stack Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "player.rkt") q (player% Player%)))) c (c tetris c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/base-types.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct posn ((x : Real) (y : Real))) (#:struct block ((x : Real) (y : Real) (color : Color))) (#:struct tetra ((center : posn) (blocks : (Listof Block)))) (#:struct world ((tetra : tetra) (blocks : (Listof Block)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "aux.rkt") q (list-pick-random (-> (Listof Tetra) Tetra)) (tetras (Listof Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/aux.rkt") (c require/typed/check c (u . "tetras.rkt") q (build-tetra-blocks (-> Color Real Real Real Real Real Real Real Real Real Real Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tetras.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-intersect (-> BSet BSet BSet)) (blocks-move (-> Real Real BSet BSet)) (blocks-rotate-cw (-> Posn BSet BSet)) (blocks-rotate-ccw (-> Posn BSet BSet)) (blocks-change-color (-> BSet Color BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-overflow? (-> BSet Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "world.rkt") q (world-key-move (-> World String World)) (next-world (-> World World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-union (-> BSet BSet BSet)) (blocks-max-x (-> BSet Real)) (blocks-min-x (-> BSet Real)) (blocks-max-y (-> BSet Real)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "tetras.rkt") q (tetra-move (-> Real Real Tetra Tetra)) (tetra-rotate-ccw (-> Tetra Tetra)) (tetra-rotate-cw (-> Tetra Tetra)) (tetra-overlaps-blocks? (-> Tetra BSet Boolean)) (tetra-change-color (-> Tetra Color Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "aux.rkt") q (list-pick-random (-> (Listof Tetra) Tetra)) (neg-1 Negative-Fixnum) (tetras (Listof Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "elim.rkt") q (eliminate-full-rows (-> BSet BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-move (-> Real Real BSet BSet)) (full-row? (-> BSet Natural Boolean)) (blocks-union (-> BSet BSet BSet)) (blocks-row (-> BSet Real BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer) (board-width Integer)))) c (c zombie c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/image-adapted.rkt") (c require/typed/check c (u . "image.rkt") q (#:struct image ((impl : Any))) (empty-scene (-> Real Real Image)) (place-image (-> Image Real Real Image Image)) (circle (-> Real String String Image)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "zombie.rkt") q (w0 World) (world-on-mouse (-> World (-> Real Real String World))) (world-on-tick (-> World (-> World))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zombie.rkt") (c require/typed/check c (u . "math.rkt") q (min (-> Real Real Real)) (max (-> Real Real Real)) (abs (-> Real Real)) (sqr (-> Real Real)) (msqrt (-> Real Real))))) c (c zordoz c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "zo-shell.rkt") q (zo-read (-> Path-String zo)) (init (-> (Vector zo String) Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)) (zo->string (->* (zo) (#:deep? Boolean) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-find.rkt") q (zo-find (-> zo String (#:limit (U Natural #f)) (Listof result))) (#:struct result ((zo : zo) (path : (Listof zo)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)))))))
